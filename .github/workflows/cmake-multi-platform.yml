name: stupid windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
    steps:
    - uses: actions/checkout@v4
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # - name: Configure CMake
    #   run: >
    #     cmake -B ${{ steps.strings.outputs.build-output-dir }}
    #     -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
    #     -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
    #     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     -S ${{ github.workspace }}

    # - name: Build
    #   run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   run: ctest --build-config ${{ matrix.build_type }}
      
    - name: testing
      run: |
        choco install -y ninja
        mkdir build;cd build
        ls "C:/Program Files (x86)/Windows Kits/10/Include"
        $f="'"
        $r='"'
        $words=' '
        $words2=
        $winsdkinclude=
        cmake -G Ninja -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_FLAGS="`"-ID:/a/ci/ci/program files/more rspaces/$((ls 'D:/a/ci/ci/pro files/more spaces/')[0].name)`"" -DCMAKE_CXX_STANDARD=20 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_BUILD_TYPE=Release -S ..
        ninja
        cd ..
        ./ci
